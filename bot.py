import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
API_KEY = os.getenv("SPOONACULAR_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('recipes.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS favorites
                  (user_id INTEGER, recipe_id INTEGER, title TEXT, image_url TEXT, PRIMARY KEY (user_id, recipe_id))''')
conn.commit()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Spoonacular API ---
def search_recipes(ingredients: list):
    """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"""
    url = "https://api.spoonacular.com/recipes/findByIngredients"
    params = {
        "ingredients": ",".join(ingredients),
        "apiKey": API_KEY,
        "number": 5,
        "ignorePantry": True
    }
    response = requests.get(url, params=params).json()
    return response

def get_recipe_details(recipe_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ü–µ–ø—Ç–∞ —Å —Ñ–æ—Ç–æ"""
    url = f"https://api.spoonacular.com/recipes/{recipe_id}/information"
    params = {"apiKey": API_KEY}
    return requests.get(url, params=params).json()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—à–µ—Ñ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏ —è –Ω–∞–π–¥—É —Ä–µ—Ü–µ–ø—Ç—ã!\n"
        "–ü—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫\n\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "/favorites ‚Äì –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",
        parse_mode="Markdown"
    )

async def handle_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ingredients = [x.strip() for x in update.message.text.split(",")]
    recipes = search_recipes(ingredients)
    
    if not recipes:
        await update.message.reply_text("üò¢ –†–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.")
        return
    
    context.user_data["recipes"] = recipes  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è callback
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
    buttons = []
    for recipe in recipes:
        buttons.append([
            InlineKeyboardButton(
                text=recipe["title"],
                callback_data=f"recipe_{recipe['id']}"
            )
        ])
    
    await update.message.reply_text(
        "üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    recipe_id = int(query.data.split("_")[1])
    details = get_recipe_details(recipe_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    caption = (
        f"üç≤ {details['title']}\n\n"
        f"‚è≥ –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {details['readyInMinutes']} –º–∏–Ω\n"
        f"üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join([f"- {ing['original']}" for ing in details['extendedIngredients']]) + "\n\n"
        f"üî™ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{details['instructions'] or '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.'}"
    )
    
    # –ö–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{recipe_id}")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_list")]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
    if details.get("image"):
        await query.message.reply_photo(
            photo=details["image"],
            caption=caption,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.message.reply_text(caption, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def save_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    recipe_id = int(query.data.split("_")[1])
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ü–µ–ø—Ç –≤ –∫–µ—à–µ
    recipe = next((r for r in context.user_data["recipes"] if r["id"] == recipe_id), None)
    if not recipe:
        await query.answer("–û—à–∏–±–∫–∞: —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Å —Ñ–æ—Ç–æ)
    cursor.execute(
        "INSERT OR IGNORE INTO favorites VALUES (?, ?, ?, ?)",
        (user_id, recipe_id, recipe["title"], recipe.get("image"))
    )
    conn.commit()
    await query.answer("‚úÖ –†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"""
    user_id = update.effective_user.id
    cursor.execute("SELECT recipe_id, title, image_url FROM favorites WHERE user_id = ?", (user_id,))
    favorites = cursor.fetchall()
    
    if not favorites:
        await update.message.reply_text("üò¢ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    for fav in favorites:
        recipe_id, title, image_url = fav
        buttons.append([InlineKeyboardButton(title, callback_data=f"fav_{recipe_id}")])
    
    await update.message.reply_text(
        "‚≠ê –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_favorite_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    query = update.callback_query
    recipe_id = int(query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    cursor.execute("SELECT title, image_url FROM favorites WHERE recipe_id = ?", (recipe_id,))
    title, image_url = cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ API
    details = get_recipe_details(recipe_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    caption = (
        f"‚≠ê {title}\n\n"
        f"‚è≥ –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {details['readyInMinutes']} –º–∏–Ω\n"
        f"üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join([f"- {ing['original']}" for ing in details['extendedIngredients']]) + "\n\n"
        f"üî™ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{details['instructions'] or '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.'}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
    keyboard = [[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{recipe_id}")]]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if image_url:
        await query.message.reply_photo(
            photo=image_url,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.message.reply_text(caption, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def delete_favorite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    query = update.callback_query
    user_id = query.from_user.id
    recipe_id = int(query.data.split("_")[1])
    
    cursor.execute("DELETE FROM favorites WHERE user_id = ? AND recipe_id = ?", (user_id, recipe_id))
    conn.commit()
    await query.answer("üóë –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª—ë–Ω!")
    await query.message.delete()

# --- –ó–∞–ø—É—Å–∫ ---
if _name_ == "_main_":
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("favorites", show_favorites))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ingredients))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(show_recipe, pattern="^recipe_"))
    app.add_handler(CallbackQueryHandler(save_recipe, pattern="^save_"))
    app.add_handler(CallbackQueryHandler(show_favorite_recipe, pattern="^fav_"))
    app.add_handler(CallbackQueryHandler(delete_favorite, pattern="^delete_"))
    app.add_handler(CallbackQueryHandler(handle_ingredients, pattern="^back_to_list"))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    app.run_polling()
